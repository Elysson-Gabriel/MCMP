
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00000174  00000208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000174  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080011a  0080011a  00000222  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000222  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000254  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008b6  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000704  00000000  00000000  00000b8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000034c  00000000  00000000  0000128e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000070  00000000  00000000  000015dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003b5  00000000  00000000  0000164c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000012f  00000000  00000000  00001a01  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001b30  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e7       	ldi	r30, 0x74	; 116
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 31       	cpi	r26, 0x1A	; 26
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e1       	ldi	r26, 0x1A	; 26
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 31       	cpi	r26, 0x1C	; 28
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a3 00 	call	0x146	; 0x146 <main>
  9e:	0c 94 b8 00 	jmp	0x170	; 0x170 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <envia_comando>:
#include <avr/io.h>
#include <util/delay.h>
#include <string.h>

void envia_comando(char comando){
	PORTB = comando;
  a6:	85 b9       	out	0x05, r24	; 5
	PORTD &= ~(0x04);
  a8:	5a 98       	cbi	0x0b, 2	; 11
	PORTD &= ~(0x02);
  aa:	59 98       	cbi	0x0b, 1	; 11
	PORTD |= (0x01);
  ac:	58 9a       	sbi	0x0b, 0	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	83 ec       	ldi	r24, 0xC3	; 195
  b0:	99 e0       	ldi	r25, 0x09	; 9
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <envia_comando+0xc>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <envia_comando+0x12>
  b8:	00 00       	nop
	_delay_ms(10);
	PORTD &= ~(0x01);	
  ba:	58 98       	cbi	0x0b, 0	; 11
  bc:	08 95       	ret

000000be <envia_dado>:
}

void envia_dado(char dado){
	PORTB = dado;
  be:	85 b9       	out	0x05, r24	; 5
	PORTD |= (0x04);
  c0:	5a 9a       	sbi	0x0b, 2	; 11
	PORTD &= ~(0x02);
  c2:	59 98       	cbi	0x0b, 1	; 11
	PORTD |= (0x01);
  c4:	58 9a       	sbi	0x0b, 0	; 11
  c6:	83 ec       	ldi	r24, 0xC3	; 195
  c8:	99 e0       	ldi	r25, 0x09	; 9
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <envia_dado+0xc>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <envia_dado+0x12>
  d0:	00 00       	nop
	_delay_ms(10);
	PORTD &= ~(0x01);
  d2:	58 98       	cbi	0x0b, 0	; 11
  d4:	08 95       	ret

000000d6 <inicializa>:
	
}

void inicializa(){
	envia_comando(0x38);
  d6:	88 e3       	ldi	r24, 0x38	; 56
  d8:	0e 94 53 00 	call	0xa6	; 0xa6 <envia_comando>
	envia_comando(0x0E);
  dc:	8e e0       	ldi	r24, 0x0E	; 14
  de:	0e 94 53 00 	call	0xa6	; 0xa6 <envia_comando>
	envia_comando(0x06);
  e2:	86 e0       	ldi	r24, 0x06	; 6
  e4:	0e 94 53 00 	call	0xa6	; 0xa6 <envia_comando>
	envia_comando(0x01);
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	0e 94 53 00 	call	0xa6	; 0xa6 <envia_comando>
	envia_comando(0x80);
  ee:	80 e8       	ldi	r24, 0x80	; 128
  f0:	0e 94 53 00 	call	0xa6	; 0xa6 <envia_comando>
  f4:	08 95       	ret

000000f6 <envia_mensagem>:
}

int i;

void envia_mensagem(char mensagem[]){
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
  fa:	ec 01       	movw	r28, r24
	for (i=0; i<strlen(mensagem); i++)
  fc:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <__data_end+0x1>
 100:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <__data_end>
 104:	0f c0       	rjmp	.+30     	; 0x124 <envia_mensagem+0x2e>
	{
		envia_dado(mensagem[i]);
 106:	fe 01       	movw	r30, r28
 108:	e8 0f       	add	r30, r24
 10a:	f9 1f       	adc	r31, r25
 10c:	80 81       	ld	r24, Z
 10e:	0e 94 5f 00 	call	0xbe	; 0xbe <envia_dado>
}

int i;

void envia_mensagem(char mensagem[]){
	for (i=0; i<strlen(mensagem); i++)
 112:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
 116:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <__data_end+0x1>
 11a:	01 96       	adiw	r24, 0x01	; 1
 11c:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <__data_end+0x1>
 120:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_end>
 124:	fe 01       	movw	r30, r28
 126:	01 90       	ld	r0, Z+
 128:	00 20       	and	r0, r0
 12a:	e9 f7       	brne	.-6      	; 0x126 <envia_mensagem+0x30>
 12c:	31 97       	sbiw	r30, 0x01	; 1
 12e:	ec 1b       	sub	r30, r28
 130:	fd 0b       	sbc	r31, r29
 132:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
 136:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <__data_end+0x1>
 13a:	8e 17       	cp	r24, r30
 13c:	9f 07       	cpc	r25, r31
 13e:	18 f3       	brcs	.-58     	; 0x106 <envia_mensagem+0x10>
	{
		envia_dado(mensagem[i]);
	}
}
 140:	df 91       	pop	r29
 142:	cf 91       	pop	r28
 144:	08 95       	ret

00000146 <main>:

int main(void)
{
    /* Replace with your application code */
	DDRB = 0xff;
 146:	8f ef       	ldi	r24, 0xFF	; 255
 148:	84 b9       	out	0x04, r24	; 4
	DDRD = 0x07;
 14a:	87 e0       	ldi	r24, 0x07	; 7
 14c:	8a b9       	out	0x0a, r24	; 10
	inicializa();
 14e:	0e 94 6b 00 	call	0xd6	; 0xd6 <inicializa>
    while (1) 
    {
		envia_comando(0x81);
 152:	81 e8       	ldi	r24, 0x81	; 129
 154:	0e 94 53 00 	call	0xa6	; 0xa6 <envia_comando>
		envia_mensagem("TESTE - ELYSSON");
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	91 e0       	ldi	r25, 0x01	; 1
 15c:	0e 94 7b 00 	call	0xf6	; 0xf6 <envia_mensagem>
		envia_comando(0xc4);
 160:	84 ec       	ldi	r24, 0xC4	; 196
 162:	0e 94 53 00 	call	0xa6	; 0xa6 <envia_comando>
		envia_mensagem(__TIME__);
 166:	80 e1       	ldi	r24, 0x10	; 16
 168:	91 e0       	ldi	r25, 0x01	; 1
 16a:	0e 94 7b 00 	call	0xf6	; 0xf6 <envia_mensagem>
 16e:	f1 cf       	rjmp	.-30     	; 0x152 <main+0xc>

00000170 <_exit>:
 170:	f8 94       	cli

00000172 <__stop_program>:
 172:	ff cf       	rjmp	.-2      	; 0x172 <__stop_program>
