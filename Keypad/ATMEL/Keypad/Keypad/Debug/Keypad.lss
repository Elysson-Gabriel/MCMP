
Keypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  000003d0  00000464  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800132  00800132  00000496  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000496  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000508  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008dd  00000000  00000000  00000548  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000071f  00000000  00000000  00000e25  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003c6  00000000  00000000  00001544  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000007c  00000000  00000000  0000190c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000409  00000000  00000000  00001988  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000112  00000000  00000000  00001d91  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001ea3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ed       	ldi	r30, 0xD0	; 208
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 33       	cpi	r26, 0x32	; 50
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e3       	ldi	r26, 0x32	; 50
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 34       	cpi	r26, 0x40	; 64
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ac 01 	call	0x358	; 0x358 <main>
  9e:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <mostraDisplay>:

int i, j, k;
int coluna = 1, linha = 3;

void mostraDisplay(int numero)
{
  a6:	9c 01       	movw	r18, r24
	j = 10;
  a8:	8a e0       	ldi	r24, 0x0A	; 10
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <j+0x1>
  b0:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <j>
	k = 1;
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <k+0x1>
  bc:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <k>
	for (i=0; i<4; i++)
  c0:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <i+0x1>
  c4:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <i>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c8:	81 ee       	ldi	r24, 0xE1	; 225
  ca:	94 e0       	ldi	r25, 0x04	; 4
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <mostraDisplay+0x26>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <mostraDisplay+0x2c>
  d2:	00 00       	nop
	{
		_delay_ms(5);
		PORTC = seletor[i];
  d4:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <i>
  d8:	f0 91 3f 01 	lds	r31, 0x013F	; 0x80013f <i+0x1>
  dc:	e2 5d       	subi	r30, 0xD2	; 210
  de:	fe 4f       	sbci	r31, 0xFE	; 254
  e0:	80 81       	ld	r24, Z
  e2:	88 b9       	out	0x08, r24	; 8
		PORTD = numeros[(numero % j)/k];
  e4:	60 91 3a 01 	lds	r22, 0x013A	; 0x80013a <j>
  e8:	70 91 3b 01 	lds	r23, 0x013B	; 0x80013b <j+0x1>
  ec:	c9 01       	movw	r24, r18
  ee:	0e 94 be 01 	call	0x37c	; 0x37c <__divmodhi4>
  f2:	60 91 3c 01 	lds	r22, 0x013C	; 0x80013c <k>
  f6:	70 91 3d 01 	lds	r23, 0x013D	; 0x80013d <k+0x1>
  fa:	0e 94 be 01 	call	0x37c	; 0x37c <__divmodhi4>
  fe:	fb 01       	movw	r30, r22
 100:	ec 5d       	subi	r30, 0xDC	; 220
 102:	fe 4f       	sbci	r31, 0xFE	; 254
 104:	80 81       	ld	r24, Z
 106:	8b b9       	out	0x0b, r24	; 11
		j *= 10;
 108:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <j>
 10c:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <j+0x1>
 110:	ac 01       	movw	r20, r24
 112:	44 0f       	add	r20, r20
 114:	55 1f       	adc	r21, r21
 116:	88 0f       	add	r24, r24
 118:	99 1f       	adc	r25, r25
 11a:	88 0f       	add	r24, r24
 11c:	99 1f       	adc	r25, r25
 11e:	88 0f       	add	r24, r24
 120:	99 1f       	adc	r25, r25
 122:	84 0f       	add	r24, r20
 124:	95 1f       	adc	r25, r21
 126:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <j+0x1>
 12a:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <j>
		k *= 10;
 12e:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <k>
 132:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <k+0x1>
 136:	ac 01       	movw	r20, r24
 138:	44 0f       	add	r20, r20
 13a:	55 1f       	adc	r21, r21
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	88 0f       	add	r24, r24
 142:	99 1f       	adc	r25, r25
 144:	88 0f       	add	r24, r24
 146:	99 1f       	adc	r25, r25
 148:	84 0f       	add	r24, r20
 14a:	95 1f       	adc	r25, r21
 14c:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <k+0x1>
 150:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <k>

void mostraDisplay(int numero)
{
	j = 10;
	k = 1;
	for (i=0; i<4; i++)
 154:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <i>
 158:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <i+0x1>
 15c:	01 96       	adiw	r24, 0x01	; 1
 15e:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <i+0x1>
 162:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <i>
 166:	04 97       	sbiw	r24, 0x04	; 4
 168:	0c f4       	brge	.+2      	; 0x16c <mostraDisplay+0xc6>
 16a:	ae cf       	rjmp	.-164    	; 0xc8 <mostraDisplay+0x22>
 16c:	81 ee       	ldi	r24, 0xE1	; 225
 16e:	94 e0       	ldi	r25, 0x04	; 4
 170:	01 97       	sbiw	r24, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <mostraDisplay+0xca>
 174:	00 c0       	rjmp	.+0      	; 0x176 <mostraDisplay+0xd0>
 176:	00 00       	nop
 178:	08 95       	ret

0000017a <pressionou_tecla>:
long atual = 0;
int entrada = 0, atualizou = 0; 

int pressionou_tecla()
{
	DDRB = 0xf0;
 17a:	80 ef       	ldi	r24, 0xF0	; 240
 17c:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x0f;
 17e:	8f e0       	ldi	r24, 0x0F	; 15
 180:	85 b9       	out	0x05, r24	; 5
	for(i = 0; i < 4; i++)
 182:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <i+0x1>
 186:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <i>
 18a:	40 e0       	ldi	r20, 0x00	; 0
 18c:	50 e0       	ldi	r21, 0x00	; 0
	{
		if (!(PINB & (1<<i))){
 18e:	23 b1       	in	r18, 0x03	; 3
 190:	30 e0       	ldi	r19, 0x00	; 0
 192:	04 2e       	mov	r0, r20
 194:	02 c0       	rjmp	.+4      	; 0x19a <pressionou_tecla+0x20>
 196:	35 95       	asr	r19
 198:	27 95       	ror	r18
 19a:	0a 94       	dec	r0
 19c:	e2 f7       	brpl	.-8      	; 0x196 <pressionou_tecla+0x1c>
 19e:	c9 01       	movw	r24, r18
 1a0:	81 70       	andi	r24, 0x01	; 1
 1a2:	99 27       	eor	r25, r25
 1a4:	20 fd       	sbrc	r18, 0
 1a6:	35 c0       	rjmp	.+106    	; 0x212 <pressionou_tecla+0x98>
			linha = i;
 1a8:	50 93 01 01 	sts	0x0101, r21	; 0x800101 <__data_start+0x1>
 1ac:	40 93 00 01 	sts	0x0100, r20	; 0x800100 <__data_start>
			DDRB = 0x0f;
 1b0:	2f e0       	ldi	r18, 0x0F	; 15
 1b2:	24 b9       	out	0x04, r18	; 4
			PORTB = 0xf0;
 1b4:	20 ef       	ldi	r18, 0xF0	; 240
 1b6:	25 b9       	out	0x05, r18	; 5
			for(i = 4; i < 8; i++)
 1b8:	24 e0       	ldi	r18, 0x04	; 4
 1ba:	30 e0       	ldi	r19, 0x00	; 0
 1bc:	30 93 3f 01 	sts	0x013F, r19	; 0x80013f <i+0x1>
 1c0:	20 93 3e 01 	sts	0x013E, r18	; 0x80013e <i>
			{
				if (!(PINB & (1<<i))){
 1c4:	1c 99       	sbic	0x03, 4	; 3
 1c6:	36 c0       	rjmp	.+108    	; 0x234 <pressionou_tecla+0xba>
 1c8:	0b c0       	rjmp	.+22     	; 0x1e0 <pressionou_tecla+0x66>
 1ca:	23 b1       	in	r18, 0x03	; 3
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	04 2e       	mov	r0, r20
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <pressionou_tecla+0x5c>
 1d2:	35 95       	asr	r19
 1d4:	27 95       	ror	r18
 1d6:	0a 94       	dec	r0
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <pressionou_tecla+0x58>
 1da:	20 fd       	sbrc	r18, 0
 1dc:	10 c0       	rjmp	.+32     	; 0x1fe <pressionou_tecla+0x84>
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <pressionou_tecla+0x6a>
	{
		if (!(PINB & (1<<i))){
			linha = i;
			DDRB = 0x0f;
			PORTB = 0xf0;
			for(i = 4; i < 8; i++)
 1e0:	44 e0       	ldi	r20, 0x04	; 4
 1e2:	50 e0       	ldi	r21, 0x00	; 0
			{
				if (!(PINB & (1<<i))){
					coluna = i-4;
 1e4:	44 50       	subi	r20, 0x04	; 4
 1e6:	51 09       	sbc	r21, r1
 1e8:	50 93 03 01 	sts	0x0103, r21	; 0x800103 <coluna+0x1>
 1ec:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <coluna>
					atualizou = 1;
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <__data_end+0x1>
 1f8:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__data_end>
					return 1;
 1fc:	08 95       	ret
	{
		if (!(PINB & (1<<i))){
			linha = i;
			DDRB = 0x0f;
			PORTB = 0xf0;
			for(i = 4; i < 8; i++)
 1fe:	4f 5f       	subi	r20, 0xFF	; 255
 200:	5f 4f       	sbci	r21, 0xFF	; 255
 202:	50 93 3f 01 	sts	0x013F, r21	; 0x80013f <i+0x1>
 206:	40 93 3e 01 	sts	0x013E, r20	; 0x80013e <i>
 20a:	48 30       	cpi	r20, 0x08	; 8
 20c:	51 05       	cpc	r21, r1
 20e:	e9 f6       	brne	.-70     	; 0x1ca <pressionou_tecla+0x50>
 210:	1a c0       	rjmp	.+52     	; 0x246 <pressionou_tecla+0xcc>

int pressionou_tecla()
{
	DDRB = 0xf0;
	PORTB = 0x0f;
	for(i = 0; i < 4; i++)
 212:	40 91 3e 01 	lds	r20, 0x013E	; 0x80013e <i>
 216:	50 91 3f 01 	lds	r21, 0x013F	; 0x80013f <i+0x1>
 21a:	4f 5f       	subi	r20, 0xFF	; 255
 21c:	5f 4f       	sbci	r21, 0xFF	; 255
 21e:	50 93 3f 01 	sts	0x013F, r21	; 0x80013f <i+0x1>
 222:	40 93 3e 01 	sts	0x013E, r20	; 0x80013e <i>
 226:	44 30       	cpi	r20, 0x04	; 4
 228:	51 05       	cpc	r21, r1
 22a:	0c f4       	brge	.+2      	; 0x22e <pressionou_tecla+0xb4>
 22c:	b0 cf       	rjmp	.-160    	; 0x18e <pressionou_tecla+0x14>
					break;
				}
			}
		}
	}
	return 0;
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	08 95       	ret
	{
		if (!(PINB & (1<<i))){
			linha = i;
			DDRB = 0x0f;
			PORTB = 0xf0;
			for(i = 4; i < 8; i++)
 234:	25 e0       	ldi	r18, 0x05	; 5
 236:	30 e0       	ldi	r19, 0x00	; 0
 238:	30 93 3f 01 	sts	0x013F, r19	; 0x80013f <i+0x1>
 23c:	20 93 3e 01 	sts	0x013E, r18	; 0x80013e <i>
 240:	45 e0       	ldi	r20, 0x05	; 5
 242:	50 e0       	ldi	r21, 0x00	; 0
 244:	c2 cf       	rjmp	.-124    	; 0x1ca <pressionou_tecla+0x50>

int pressionou_tecla()
{
	DDRB = 0xf0;
	PORTB = 0x0f;
	for(i = 0; i < 4; i++)
 246:	20 91 3e 01 	lds	r18, 0x013E	; 0x80013e <i>
 24a:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <i+0x1>
 24e:	2f 5f       	subi	r18, 0xFF	; 255
 250:	3f 4f       	sbci	r19, 0xFF	; 255
 252:	30 93 3f 01 	sts	0x013F, r19	; 0x80013f <i+0x1>
 256:	20 93 3e 01 	sts	0x013E, r18	; 0x80013e <i>
				}
			}
		}
	}
	return 0;
}
 25a:	08 95       	ret

0000025c <atualiza_display>:

void atualiza_display(){
 25c:	0f 93       	push	r16
 25e:	1f 93       	push	r17
	entrada = teclado[linha][coluna];
 260:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
 264:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
 268:	ee 0f       	add	r30, r30
 26a:	ff 1f       	adc	r31, r31
 26c:	ee 0f       	add	r30, r30
 26e:	ff 1f       	adc	r31, r31
 270:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <coluna>
 274:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <coluna+0x1>
 278:	e8 0f       	add	r30, r24
 27a:	f9 1f       	adc	r31, r25
 27c:	ee 0f       	add	r30, r30
 27e:	ff 1f       	adc	r31, r31
 280:	ec 5f       	subi	r30, 0xFC	; 252
 282:	fe 4f       	sbci	r31, 0xFE	; 254
 284:	40 81       	ld	r20, Z
 286:	51 81       	ldd	r21, Z+1	; 0x01
 288:	50 93 35 01 	sts	0x0135, r21	; 0x800135 <entrada+0x1>
 28c:	40 93 34 01 	sts	0x0134, r20	; 0x800134 <entrada>
	if (entrada == -1)
 290:	4f 3f       	cpi	r20, 0xFF	; 255
 292:	2f ef       	ldi	r18, 0xFF	; 255
 294:	52 07       	cpc	r21, r18
 296:	79 f4       	brne	.+30     	; 0x2b6 <atualiza_display+0x5a>
	{
		atual = 0;
 298:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <atual>
 29c:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <atual+0x1>
 2a0:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <atual+0x2>
 2a4:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <atual+0x3>
	}
	if(atualizou && ((atual * 10) + entrada) < 10000){
 2a8:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <__data_end>
 2ac:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <__data_end+0x1>
 2b0:	89 2b       	or	r24, r25
 2b2:	81 f5       	brne	.+96     	; 0x314 <atualiza_display+0xb8>
 2b4:	3e c0       	rjmp	.+124    	; 0x332 <atualiza_display+0xd6>
 2b6:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <__data_end>
 2ba:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <__data_end+0x1>
 2be:	89 2b       	or	r24, r25
 2c0:	c1 f1       	breq	.+112    	; 0x332 <atualiza_display+0xd6>
 2c2:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <atual>
 2c6:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <atual+0x1>
 2ca:	a0 91 38 01 	lds	r26, 0x0138	; 0x800138 <atual+0x2>
 2ce:	b0 91 39 01 	lds	r27, 0x0139	; 0x800139 <atual+0x3>
 2d2:	88 0f       	add	r24, r24
 2d4:	99 1f       	adc	r25, r25
 2d6:	aa 1f       	adc	r26, r26
 2d8:	bb 1f       	adc	r27, r27
 2da:	8c 01       	movw	r16, r24
 2dc:	9d 01       	movw	r18, r26
 2de:	00 0f       	add	r16, r16
 2e0:	11 1f       	adc	r17, r17
 2e2:	22 1f       	adc	r18, r18
 2e4:	33 1f       	adc	r19, r19
 2e6:	00 0f       	add	r16, r16
 2e8:	11 1f       	adc	r17, r17
 2ea:	22 1f       	adc	r18, r18
 2ec:	33 1f       	adc	r19, r19
 2ee:	80 0f       	add	r24, r16
 2f0:	91 1f       	adc	r25, r17
 2f2:	a2 1f       	adc	r26, r18
 2f4:	b3 1f       	adc	r27, r19
 2f6:	05 2e       	mov	r0, r21
 2f8:	00 0c       	add	r0, r0
 2fa:	66 0b       	sbc	r22, r22
 2fc:	77 0b       	sbc	r23, r23
 2fe:	84 0f       	add	r24, r20
 300:	95 1f       	adc	r25, r21
 302:	a6 1f       	adc	r26, r22
 304:	b7 1f       	adc	r27, r23
 306:	80 31       	cpi	r24, 0x10	; 16
 308:	27 e2       	ldi	r18, 0x27	; 39
 30a:	92 07       	cpc	r25, r18
 30c:	a1 05       	cpc	r26, r1
 30e:	b1 05       	cpc	r27, r1
 310:	84 f4       	brge	.+32     	; 0x332 <atualiza_display+0xd6>
 312:	03 c0       	rjmp	.+6      	; 0x31a <atualiza_display+0xbe>
 314:	8f ef       	ldi	r24, 0xFF	; 255
 316:	9f ef       	ldi	r25, 0xFF	; 255
 318:	dc 01       	movw	r26, r24
		atual = (atual * 10) + entrada;
 31a:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <atual>
 31e:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <atual+0x1>
 322:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <atual+0x2>
 326:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <atual+0x3>
		atualizou = 0;
 32a:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <__data_end+0x1>
 32e:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <__data_end>
	}
}
 332:	1f 91       	pop	r17
 334:	0f 91       	pop	r16
 336:	08 95       	ret

00000338 <ler_teclado>:

void ler_teclado(){
 338:	cf 93       	push	r28
 33a:	df 93       	push	r29
	while (pressionou_tecla())
	{
		mostraDisplay(atual);
 33c:	c6 e3       	ldi	r28, 0x36	; 54
 33e:	d1 e0       	ldi	r29, 0x01	; 1
		atualizou = 0;
	}
}

void ler_teclado(){
	while (pressionou_tecla())
 340:	04 c0       	rjmp	.+8      	; 0x34a <ler_teclado+0x12>
	{
		mostraDisplay(atual);
 342:	88 81       	ld	r24, Y
 344:	99 81       	ldd	r25, Y+1	; 0x01
 346:	0e 94 53 00 	call	0xa6	; 0xa6 <mostraDisplay>
		atualizou = 0;
	}
}

void ler_teclado(){
	while (pressionou_tecla())
 34a:	0e 94 bd 00 	call	0x17a	; 0x17a <pressionou_tecla>
 34e:	89 2b       	or	r24, r25
 350:	c1 f7       	brne	.-16     	; 0x342 <ler_teclado+0xa>
	{
		mostraDisplay(atual);
	}
}
 352:	df 91       	pop	r29
 354:	cf 91       	pop	r28
 356:	08 95       	ret

00000358 <main>:

int main(void)
{
	/* Replace with your application code */
	DDRC = 0x0f;
 358:	8f e0       	ldi	r24, 0x0F	; 15
 35a:	87 b9       	out	0x07, r24	; 7
	DDRD = 0x7f;
 35c:	8f e7       	ldi	r24, 0x7F	; 127
 35e:	8a b9       	out	0x0a, r24	; 10
	PORTD = numeros[0];
 360:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <numeros>
 364:	8b b9       	out	0x0b, r24	; 11
	
	while (1)
	{
		ler_teclado();
		atualiza_display();
		mostraDisplay(atual);
 366:	c6 e3       	ldi	r28, 0x36	; 54
 368:	d1 e0       	ldi	r29, 0x01	; 1
	DDRD = 0x7f;
	PORTD = numeros[0];
	
	while (1)
	{
		ler_teclado();
 36a:	0e 94 9c 01 	call	0x338	; 0x338 <ler_teclado>
		atualiza_display();
 36e:	0e 94 2e 01 	call	0x25c	; 0x25c <atualiza_display>
		mostraDisplay(atual);
 372:	88 81       	ld	r24, Y
 374:	99 81       	ldd	r25, Y+1	; 0x01
 376:	0e 94 53 00 	call	0xa6	; 0xa6 <mostraDisplay>
 37a:	f7 cf       	rjmp	.-18     	; 0x36a <main+0x12>

0000037c <__divmodhi4>:
 37c:	97 fb       	bst	r25, 7
 37e:	07 2e       	mov	r0, r23
 380:	16 f4       	brtc	.+4      	; 0x386 <__divmodhi4+0xa>
 382:	00 94       	com	r0
 384:	07 d0       	rcall	.+14     	; 0x394 <__divmodhi4_neg1>
 386:	77 fd       	sbrc	r23, 7
 388:	09 d0       	rcall	.+18     	; 0x39c <__divmodhi4_neg2>
 38a:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <__udivmodhi4>
 38e:	07 fc       	sbrc	r0, 7
 390:	05 d0       	rcall	.+10     	; 0x39c <__divmodhi4_neg2>
 392:	3e f4       	brtc	.+14     	; 0x3a2 <__divmodhi4_exit>

00000394 <__divmodhi4_neg1>:
 394:	90 95       	com	r25
 396:	81 95       	neg	r24
 398:	9f 4f       	sbci	r25, 0xFF	; 255
 39a:	08 95       	ret

0000039c <__divmodhi4_neg2>:
 39c:	70 95       	com	r23
 39e:	61 95       	neg	r22
 3a0:	7f 4f       	sbci	r23, 0xFF	; 255

000003a2 <__divmodhi4_exit>:
 3a2:	08 95       	ret

000003a4 <__udivmodhi4>:
 3a4:	aa 1b       	sub	r26, r26
 3a6:	bb 1b       	sub	r27, r27
 3a8:	51 e1       	ldi	r21, 0x11	; 17
 3aa:	07 c0       	rjmp	.+14     	; 0x3ba <__udivmodhi4_ep>

000003ac <__udivmodhi4_loop>:
 3ac:	aa 1f       	adc	r26, r26
 3ae:	bb 1f       	adc	r27, r27
 3b0:	a6 17       	cp	r26, r22
 3b2:	b7 07       	cpc	r27, r23
 3b4:	10 f0       	brcs	.+4      	; 0x3ba <__udivmodhi4_ep>
 3b6:	a6 1b       	sub	r26, r22
 3b8:	b7 0b       	sbc	r27, r23

000003ba <__udivmodhi4_ep>:
 3ba:	88 1f       	adc	r24, r24
 3bc:	99 1f       	adc	r25, r25
 3be:	5a 95       	dec	r21
 3c0:	a9 f7       	brne	.-22     	; 0x3ac <__udivmodhi4_loop>
 3c2:	80 95       	com	r24
 3c4:	90 95       	com	r25
 3c6:	bc 01       	movw	r22, r24
 3c8:	cd 01       	movw	r24, r26
 3ca:	08 95       	ret

000003cc <_exit>:
 3cc:	f8 94       	cli

000003ce <__stop_program>:
 3ce:	ff cf       	rjmp	.-2      	; 0x3ce <__stop_program>
